"""Branching rules in the Branch-and-Bound algorithm."""

from abc import ABC, abstractmethod
from bbpy.problem import Problem

from .node import Node


class BranchingRule(ABC):
    """Base class for branching rules."""

    def initialize(self, problem: Problem):
        """
        Initialize the branching rule for the given problem.

        Parameters
        ----------
        problem : Problem
            The problem to be solved by the Branch-and-Bound solver.
        """
        pass

    @abstractmethod
    def branch(self, node: Node) -> list[Node]:
        """
        Generate child nodes by branching on the given node.

        Parameters
        ----------
        node : Node
            The current node to branch on.

        Returns
        -------
        list of Node
            A list of child nodes generated by branching.
        """
        pass
